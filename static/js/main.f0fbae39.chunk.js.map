{"version":3,"sources":["title.js","addtodo.js","list.js","filter.js","app.js","serviceWorker.js","index.js"],"names":["Title","className","href","rel","target","id","icon","faLinkedin","AddTodo","props","onSubmit","placeholder","value","item","text","onChange","required","List","list","i","key","done","onClick","faCheck","onDelete","faTrash","filter","items","map","newList","Filter","changeView","App","handleChange","e","newItem","Date","now","setState","handleSubmit","preventDefault","state","localStorage","getItem","setItem","JSON","stringify","parse","handleClick","handleDelete","newFilter","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0fbae39.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\n\r\nfunction Title () {\r\n    return (\r\n        <header className='title'>\r\n            <h1>Todo List App</h1> \r\n            <p>with React</p>\r\n            <a href='https://github.com/hnhon' rel=\"noopener noreferrer\" target=\"_blank\" id='repo'>Project Repo</a>\r\n            <p>Contact <a href='https://linkedin.com/in/hiunamhon' rel=\"noopener noreferrer\" target=\"_blank\" id='social'> <FontAwesomeIcon icon={faLinkedin} /></a></p>  \r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nfunction AddTodo (props) {\r\n    return (\r\n        <form className='form' onSubmit={props.onSubmit}>\r\n            <input placeholder='Todo Item' value={props.item.text} onChange={props.onChange} required>\r\n            </input>\r\n            <button id='addtodo'>\r\n                Add\r\n            </button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faCheck, faTrash} from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction List (props) {\r\n    const list = (i)=> {\r\n            return (\r\n                    <ul className='list grid' key={i.id}>\r\n                        <p id={i.done === true? \"done\": \"active\"}>\r\n                            {i.text}\r\n                        </p> \r\n                        <i onClick={() => props.onClick(i.id)}>\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                        </i>\r\n                        <i onClick={() => props.onDelete(i.id)}>\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                        </i>\r\n                    </ul>\r\n            )\r\n    }\r\n\r\n    if (props.filter==='All') {\r\n        return (\r\n            <div>\r\n                {\r\n                    props.items.map(i => list(i))\r\n                }\r\n            </div>\r\n        );\r\n    } else if (props.filter==='Active') {\r\n        let newList = props.items.filter(\r\n            item => {return item.done === false;}\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    newList.map(i =>list(i))\r\n                }\r\n            </div>\r\n        );\r\n    } else {\r\n        let newList = props.items.filter(\r\n            item => {return item.done === true;}\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    newList.map(i => list(i))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default List; \r\n","import React from 'react';\r\n\r\nfunction Filter (props) {\r\n    return (\r\n        <div className='viewButton grid'>\r\n            <button className={(props.filter==='All')? 'active': 'inactive' } onClick={()=>{props.changeView('All')}}>All</button>\r\n            <button className={(props.filter==='Active')? 'active': 'inactive' } onClick={()=>{props.changeView('Active')}}>Active</button>\r\n            <button className={(props.filter==='Completed')? 'active': 'inactive' } onClick={()=>{props.changeView('Completed')}}>Completed</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Filter;","import React, {Component} from 'react';\r\nimport Title from './title';\r\nimport AddTodo from './addtodo';\r\nimport List from './list';\r\nimport Filter from './filter';\r\n\r\n//define App component\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: {\r\n        text: '', \r\n        id: Date.now(),\r\n        done: false\r\n      },\r\n      items: localStorage.getItem('lists')==null?[]:JSON.parse(localStorage.getItem('lists')),\r\n      filter: 'All'\r\n    };\r\n  }\r\n\r\n  //handle input from user\r\n  handleChange = (e) => {\r\n      let newItem = \r\n      {\r\n        text: e.target.value,\r\n        id: Date.now(),\r\n        done: false\r\n      }\r\n      this.setState ({item: newItem});\r\n  }\r\n\r\n  //handle submit from user\r\n  handleSubmit = (e) => {\r\n    //prevent submit button takes page to other route\r\n    e.preventDefault();\r\n    this.setState ({\r\n      items: [...this.state.items, this.state.item],\r\n      item: {\r\n        text: '', \r\n        id: Date.now(),\r\n        done: false\r\n      }\r\n    })\r\n    //update localStorage \r\n    if (localStorage.getItem('lists')==null) {\r\n      let list = [];\r\n      list = [...list, this.state.item];\r\n      localStorage.setItem('lists', JSON.stringify(list))\r\n    } else {\r\n      let list = JSON.parse(localStorage.getItem('lists'));\r\n      list = [...list, this.state.item];\r\n      localStorage.setItem('lists', JSON.stringify(list)) \r\n    }\r\n  }\r\n\r\n  //hanlde completed button funtion\r\n  handleClick = (id) => {\r\n    let newList = this.state.items.map (i => {\r\n      if (i.id === id) {\r\n        return {\r\n          text: i.text,\r\n          id: i.id,\r\n          done: !i.done\r\n        } } else {\r\n          return i;\r\n        }      \r\n    });\r\n    this.setState ({\r\n      items: newList\r\n    })\r\n    localStorage.setItem('lists', JSON.stringify(newList));\r\n  }\r\n\r\n  //hanlde Delete funtion\r\n  handleDelete = (key) => {\r\n     let newList = this.state.items.filter(\r\n       (item) => {\r\n         return item.id !== key\r\n       }\r\n     );\r\n    this.setState ({\r\n      items: newList\r\n    });\r\n\r\n    localStorage.setItem('lists', JSON.stringify(newList))\r\n  }\r\n\r\n  //change view between all active and completed\r\n  changeView = (newFilter) => {\r\n    this.setState ({\r\n      filter: newFilter\r\n    });\r\n  } \r\n\r\n  render () {\r\n    return (\r\n      <div className='App'>\r\n        <Title />\r\n        <AddTodo onChange={this.handleChange} onSubmit={this.handleSubmit} item={this.state.item} />\r\n        <Filter changeView={this.changeView} filter={this.state.filter} />\r\n        <List items={this.state.items} onClick={this.handleClick} onDelete={this.handleDelete} filter={this.state.filter} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}